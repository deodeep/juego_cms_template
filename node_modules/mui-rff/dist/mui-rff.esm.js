import MuiAutocomplete from '@mui/material/Autocomplete';
import { useField, Field, FormSpy } from 'react-final-form';
import React from 'react';
import { FormHelperText, FormControl, FormLabel, FormGroup, FormControlLabel, Checkbox, Switch, RadioGroup, Radio, InputLabel, Select as Select$1, MenuItem, TextField as TextField$2 } from '@mui/material';
import TextField$1 from '@mui/material/TextField';
import { DatePicker as DatePicker$1, DateTimePicker as DateTimePicker$1, TimePicker as TimePicker$1 } from '@mui/x-date-pickers';

function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return e;
  };
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function (t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function (t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw new Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(typeof e + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function (e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function () {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function (e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw new Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function (t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function (t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    catch: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

function ErrorMessage(_ref) {
  var showError = _ref.showError,
    meta = _ref.meta,
    formHelperTextProps = _ref.formHelperTextProps,
    helperText = _ref.helperText;
  if (showError) {
    return React.createElement(FormHelperText, _extends({}, formHelperTextProps), meta.error || meta.submitError);
  } else if (helperText) {
    return React.createElement(FormHelperText, _extends({}, formHelperTextProps), helperText);
  } else {
    return React.createElement(React.Fragment, null);
  }
}
var config = {
  subscription: {
    error: true,
    submitError: true,
    dirtySinceLastSubmit: true,
    touched: true,
    modified: true
  }
};
var useFieldForErrors = function useFieldForErrors(name) {
  return useField(name, config);
};
var showErrorOnChange = function showErrorOnChange(_ref2) {
  var _ref2$meta = _ref2.meta,
    submitError = _ref2$meta.submitError,
    dirtySinceLastSubmit = _ref2$meta.dirtySinceLastSubmit,
    error = _ref2$meta.error,
    touched = _ref2$meta.touched,
    modified = _ref2$meta.modified;
  return !!((submitError && !dirtySinceLastSubmit || error) && (touched || modified));
};
var showErrorOnBlur = function showErrorOnBlur(_ref3) {
  var _ref3$meta = _ref3.meta,
    submitError = _ref3$meta.submitError,
    dirtySinceLastSubmit = _ref3$meta.dirtySinceLastSubmit,
    error = _ref3$meta.error,
    touched = _ref3$meta.touched;
  return !!((submitError && !dirtySinceLastSubmit || error) && touched);
};

var _excluded$8 = ["name", "fieldProps"],
  _excluded2$8 = ["input", "meta", "options", "label", "required", "multiple", "textFieldProps", "getOptionValue", "showError", "placeholder", "onChange"],
  _excluded3$4 = ["helperText"],
  _excluded4$3 = ["variant", "onFocus", "onBlur"];
function Autocomplete(props) {
  var name = props.name,
    fieldProps = props.fieldProps,
    rest = _objectWithoutPropertiesLoose(props, _excluded$8);
  return React.createElement(Field, _extends({
    name: name,
    render: function render(fieldRenderProps) {
      return React.createElement(AutocompleteWrapper, _extends({}, fieldRenderProps, rest));
    }
  }, fieldProps));
}
function AutocompleteWrapper(props) {
  var _props$input = props.input,
    name = _props$input.name,
    value = _props$input.value,
    onChange = _props$input.onChange,
    _onFocus = _props$input.onFocus,
    _onBlur = _props$input.onBlur,
    meta = props.meta,
    options = props.options,
    label = props.label,
    required = props.required,
    multiple = props.multiple,
    textFieldProps = props.textFieldProps,
    getOptionValue = props.getOptionValue,
    _props$showError = props.showError,
    showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
    placeholder = props.placeholder,
    onChangeCallback = props.onChange,
    rest = _objectWithoutPropertiesLoose(props, _excluded2$8);
  function getValue(values) {
    if (!getOptionValue) {
      return values;
    }
    // ternary hell...
    return multiple ? values ? values.map(getOptionValue) : null : values ? getOptionValue(values) : null;
  }
  var helperText = rest.helperText,
    lessrest = _objectWithoutPropertiesLoose(rest, _excluded3$4);
  var _ref = textFieldProps || {},
    variant = _ref.variant,
    textFieldPropsFocus = _ref.onFocus,
    textFieldPropsBlur = _ref.onBlur,
    restTextFieldProps = _objectWithoutPropertiesLoose(_ref, _excluded4$3);
  var defaultValue;
  if (!getOptionValue) {
    defaultValue = value;
  } else if (value) {
    options.forEach(function (option) {
      var optionValue = getOptionValue(option);
      if (multiple) {
        if (!defaultValue) {
          defaultValue = [];
        }
        value.forEach(function (v) {
          if (v === optionValue) {
            defaultValue.push(option);
          }
        });
      } else {
        if (value === optionValue) {
          defaultValue = option;
        }
      }
    });
  }
  var onChangeFunc = function onChangeFunc(
  // eslint-disable-next-line @typescript-eslint/ban-types
  event, value, reason, details) {
    var gotValue = getValue(value);
    onChange(gotValue);
    if (onChangeCallback) {
      onChangeCallback(event, value, reason, details);
    }
  };
  var error = meta.error,
    submitError = meta.submitError;
  var isError = showError({
    meta: meta
  });
  return React.createElement(MuiAutocomplete, _extends({
    multiple: multiple,
    onChange: onChangeFunc,
    options: options,
    value: defaultValue || (multiple ? [] : null),
    renderInput: function renderInput(params) {
      var _restTextFieldProps$I, _params$InputProps, _restTextFieldProps$I2, _params$InputProps2, _restTextFieldProps$I3;
      return React.createElement(TextField$1, _extends({
        label: label,
        required: required,
        helperText: isError ? error || submitError : helperText,
        error: isError,
        name: name,
        placeholder: placeholder,
        variant: variant,
        onFocus: function onFocus(e) {
          textFieldPropsFocus == null ? void 0 : textFieldPropsFocus(e);
          _onFocus(e);
        },
        onBlur: function onBlur(e) {
          textFieldPropsBlur == null ? void 0 : textFieldPropsBlur(e);
          _onBlur(e);
        }
      }, params, restTextFieldProps, {
        InputProps: _extends({}, params.InputProps, restTextFieldProps.InputProps, ((_restTextFieldProps$I = restTextFieldProps.InputProps) == null ? void 0 : _restTextFieldProps$I.startAdornment) && {
          startAdornment: React.createElement(React.Fragment, null, restTextFieldProps.InputProps.startAdornment, (_params$InputProps = params.InputProps) == null ? void 0 : _params$InputProps.startAdornment)
        }, ((_restTextFieldProps$I2 = restTextFieldProps.InputProps) == null ? void 0 : _restTextFieldProps$I2.endAdornment) && {
          endAdornment: React.createElement(React.Fragment, null, (_params$InputProps2 = params.InputProps) == null ? void 0 : _params$InputProps2.endAdornment, (_restTextFieldProps$I3 = restTextFieldProps.InputProps) == null ? void 0 : _restTextFieldProps$I3.endAdornment)
        }),
        fullWidth: true
      }));
    }
  }, lessrest));
}

var _excluded$7 = ["required", "label", "data", "name", "helperText", "fieldProps", "formControlProps", "formGroupProps", "formLabelProps", "formControlLabelProps", "formHelperTextProps", "showError"],
  _excluded2$7 = ["name", "value", "onChange", "checked"];
function Checkboxes(props) {
  var required = props.required,
    label = props.label,
    data = props.data,
    name = props.name,
    helperText = props.helperText,
    fieldProps = props.fieldProps,
    formControlProps = props.formControlProps,
    formGroupProps = props.formGroupProps,
    formLabelProps = props.formLabelProps,
    formControlLabelProps = props.formControlLabelProps,
    formHelperTextProps = props.formHelperTextProps,
    _props$showError = props.showError,
    showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
    restCheckboxes = _objectWithoutPropertiesLoose(props, _excluded$7);
  var itemsData = Array.isArray(data) ? data : [data];
  var single = !Array.isArray(data);
  var field = useFieldForErrors(name);
  var isError = showError(field);
  return React.createElement(FormControl, _extends({
    required: required,
    error: isError
  }, formControlProps), label ? React.createElement(FormLabel, _extends({}, formLabelProps), label) : React.createElement(React.Fragment, null), React.createElement(FormGroup, _extends({}, formGroupProps), itemsData.map(function (item, idx) {
    return React.createElement(FormControlLabel, _extends({
      key: idx,
      name: name,
      label: item.label,
      value: single ? undefined : item.value,
      disabled: item.disabled,
      control: React.createElement(Field, _extends({
        type: "checkbox",
        name: name,
        render: function render(_ref) {
          var _ref$input = _ref.input,
            name = _ref$input.name,
            value = _ref$input.value,
            onChange = _ref$input.onChange,
            checked = _ref$input.checked,
            restInput = _objectWithoutPropertiesLoose(_ref$input, _excluded2$7);
          return React.createElement(Checkbox, _extends({
            name: name,
            value: value,
            onChange: onChange,
            checked: checked,
            disabled: item.disabled,
            inputProps: _extends({
              required: required
            }, restInput),
            indeterminate: item.indeterminate
          }, restCheckboxes));
        }
      }, fieldProps))
    }, formControlLabelProps));
  })), React.createElement(ErrorMessage, {
    showError: isError,
    meta: field.meta,
    formHelperTextProps: formHelperTextProps,
    helperText: helperText
  }));
}

var _excluded$6 = ["name", "data", "label", "required", "helperText", "fieldProps", "formControlProps", "formGroupProps", "formLabelProps", "formControlLabelProps", "formHelperTextProps", "showError"],
  _excluded2$6 = ["name", "value", "onChange", "checked"];
function Switches(props) {
  var name = props.name,
    data = props.data,
    label = props.label,
    required = props.required,
    helperText = props.helperText,
    fieldProps = props.fieldProps,
    formControlProps = props.formControlProps,
    formGroupProps = props.formGroupProps,
    formLabelProps = props.formLabelProps,
    formControlLabelProps = props.formControlLabelProps,
    formHelperTextProps = props.formHelperTextProps,
    _props$showError = props.showError,
    showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
    restSwitches = _objectWithoutPropertiesLoose(props, _excluded$6);
  var itemsData = Array.isArray(data) ? data : [data];
  var single = !Array.isArray(data);
  var field = useFieldForErrors(name);
  var isError = showError(field);
  return React.createElement(FormControl, _extends({
    required: required,
    error: isError
  }, formControlProps), label ? React.createElement(FormLabel, _extends({}, formLabelProps), label) : React.createElement(React.Fragment, null), React.createElement(FormGroup, _extends({}, formGroupProps), itemsData.map(function (item, idx) {
    return React.createElement(FormControlLabel, _extends({
      key: idx,
      name: name,
      label: item.label,
      value: single ? undefined : item.value,
      disabled: item.disabled,
      control: React.createElement(Field, _extends({
        type: "checkbox",
        name: name,
        render: function render(_ref) {
          var _ref$input = _ref.input,
            name = _ref$input.name,
            value = _ref$input.value,
            onChange = _ref$input.onChange,
            checked = _ref$input.checked,
            restInput = _objectWithoutPropertiesLoose(_ref$input, _excluded2$6);
          return React.createElement(Switch, _extends({
            name: name,
            value: value,
            onChange: onChange,
            checked: checked,
            disabled: item.disabled,
            required: required,
            inputProps: _extends({
              required: required
            }, restInput)
          }, restSwitches));
        }
      }, fieldProps))
    }, formControlLabelProps));
  })), React.createElement(ErrorMessage, {
    showError: isError,
    meta: field.meta,
    formHelperTextProps: formHelperTextProps,
    helperText: helperText
  }));
}

var _excluded$5 = ["name", "data", "label", "required", "helperText", "formLabelProps", "formControlLabelProps", "fieldProps", "formControlProps", "radioGroupProps", "formHelperTextProps", "showError"],
  _excluded2$5 = ["name", "value", "onChange", "checked"];
function Radios(props) {
  var name = props.name,
    data = props.data,
    label = props.label,
    required = props.required,
    helperText = props.helperText,
    formLabelProps = props.formLabelProps,
    formControlLabelProps = props.formControlLabelProps,
    fieldProps = props.fieldProps,
    formControlProps = props.formControlProps,
    radioGroupProps = props.radioGroupProps,
    formHelperTextProps = props.formHelperTextProps,
    _props$showError = props.showError,
    showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
    restRadios = _objectWithoutPropertiesLoose(props, _excluded$5);
  var field = useFieldForErrors(name);
  var isError = showError(field);
  return React.createElement(FormControl, _extends({
    required: required,
    error: isError
  }, formControlProps), !!label && React.createElement(FormLabel, _extends({}, formLabelProps), label), React.createElement(RadioGroup, _extends({}, radioGroupProps), data.map(function (item, idx) {
    return React.createElement(FormControlLabel, _extends({
      key: idx,
      name: name,
      label: item.label,
      value: item.value,
      disabled: item.disabled,
      control: React.createElement(Field, _extends({
        name: name,
        type: "radio",
        render: function render(_ref) {
          var _ref$input = _ref.input,
            name = _ref$input.name,
            value = _ref$input.value,
            onChange = _ref$input.onChange,
            checked = _ref$input.checked,
            restInput = _objectWithoutPropertiesLoose(_ref$input, _excluded2$5);
          return React.createElement(Radio, _extends({
            name: name,
            value: value,
            onChange: onChange,
            checked: checked,
            disabled: item.disabled,
            required: required,
            inputProps: _extends({
              required: required
            }, restInput)
          }, restRadios));
        }
      }, fieldProps))
    }, formControlLabelProps));
  })), React.createElement(ErrorMessage, {
    showError: isError,
    meta: field.meta,
    formHelperTextProps: formHelperTextProps,
    helperText: helperText
  }));
}

var _excluded$4 = ["name", "label", "data", "children", "required", "multiple", "helperText", "fieldProps", "inputLabelProps", "formControlProps", "formHelperTextProps", "menuItemProps", "showError"],
  _excluded2$4 = ["name", "value", "onChange"];
function Select(props) {
  var name = props.name,
    label = props.label,
    data = props.data,
    children = props.children,
    required = props.required,
    multiple = props.multiple,
    helperText = props.helperText,
    fieldProps = props.fieldProps,
    inputLabelProps = props.inputLabelProps,
    formControlProps = props.formControlProps,
    formHelperTextProps = props.formHelperTextProps,
    menuItemProps = props.menuItemProps,
    _props$showError = props.showError,
    showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
    restSelectProps = _objectWithoutPropertiesLoose(props, _excluded$4);
  if (!data && !children) {
    throw new Error('Please specify either children or data as an attribute.');
  }
  var variant = restSelectProps.variant;
  var field = useFieldForErrors(name);
  var isError = showError(field);
  return React.createElement(Field, _extends({
    name: name,
    render: function render(_ref) {
      var _ref$input = _ref.input,
        name = _ref$input.name,
        value = _ref$input.value,
        onChange = _ref$input.onChange,
        restInput = _objectWithoutPropertiesLoose(_ref$input, _excluded2$4);
      // prevents an error that happens if you don't have initialValues defined in advance
      var finalValue = multiple && !value ? [] : value;
      var labelId = "select-input-" + name;
      return React.createElement(FormControl, _extends({
        required: required,
        error: isError,
        fullWidth: true,
        variant: variant
      }, formControlProps), !!label && React.createElement(InputLabel, _extends({
        id: labelId
      }, inputLabelProps), label), React.createElement(Select$1, _extends({
        name: name,
        value: finalValue,
        onChange: onChange,
        multiple: multiple,
        label: label,
        labelId: labelId,
        inputProps: _extends({
          required: required
        }, restInput)
      }, restSelectProps), data ? data.map(function (item) {
        return React.createElement(MenuItem, _extends({
          value: item.value,
          key: item.value,
          disabled: item.disabled
        }, menuItemProps), item.label);
      }) : children), React.createElement(ErrorMessage, {
        showError: isError,
        meta: field.meta,
        formHelperTextProps: formHelperTextProps,
        helperText: helperText
      }));
    }
  }, fieldProps));
}

var _excluded$3 = ["name", "fieldProps"],
  _excluded2$3 = ["name", "onChange", "value"],
  _excluded3$3 = ["input", "meta", "showError"],
  _excluded4$2 = ["helperText", "textFieldProps", "required"];
function DatePicker(props) {
  var name = props.name,
    fieldProps = props.fieldProps,
    rest = _objectWithoutPropertiesLoose(props, _excluded$3);
  return React.createElement(Field, _extends({
    name: name,
    render: function render(fieldRenderProps) {
      return React.createElement(DatePickerWrapper, _extends({}, fieldRenderProps, rest));
    }
  }, fieldProps));
}
function DatePickerWrapper(props) {
  var _props$input = props.input,
    name = _props$input.name,
    onChange = _props$input.onChange,
    value = _props$input.value,
    restInput = _objectWithoutPropertiesLoose(_props$input, _excluded2$3),
    meta = props.meta,
    _props$showError = props.showError,
    showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
    rest = _objectWithoutPropertiesLoose(props, _excluded3$3);
  var error = meta.error,
    submitError = meta.submitError;
  var isError = showError({
    meta: meta
  });
  var helperText = rest.helperText,
    textFieldProps = rest.textFieldProps,
    required = rest.required,
    lessRest = _objectWithoutPropertiesLoose(rest, _excluded4$2);
  return React.createElement(DatePicker$1, _extends({
    onChange: onChange,
    value: value === '' ? null : value
  }, lessRest, {
    slotProps: {
      textField: _extends({}, textFieldProps, {
        helperText: isError ? error || submitError : helperText,
        inputProps: {
          onBlur: function onBlur(event) {
            restInput.onBlur(event);
          },
          onFocus: function onFocus(event) {
            restInput.onFocus(event);
          }
        },
        error: isError,
        fullWidth: true,
        name: name,
        onChange: onChange,
        value: value === '' ? null : value,
        required: required
      })
    }
  }));
}

var _excluded$2 = ["name", "fieldProps"],
  _excluded2$2 = ["name", "onChange", "value"],
  _excluded3$2 = ["input", "meta", "showError"],
  _excluded4$1 = ["helperText", "textFieldProps", "required"];
function DateTimePicker(props) {
  var name = props.name,
    fieldProps = props.fieldProps,
    rest = _objectWithoutPropertiesLoose(props, _excluded$2);
  return React.createElement(Field, _extends({
    name: name,
    render: function render(fieldRenderProps) {
      return React.createElement(DateTimePickerWrapper, _extends({}, fieldRenderProps, rest));
    }
  }, fieldProps));
}
function DateTimePickerWrapper(props) {
  var _props$input = props.input,
    name = _props$input.name,
    onChange = _props$input.onChange,
    value = _props$input.value,
    restInput = _objectWithoutPropertiesLoose(_props$input, _excluded2$2),
    meta = props.meta,
    _props$showError = props.showError,
    showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
    rest = _objectWithoutPropertiesLoose(props, _excluded3$2);
  var error = meta.error,
    submitError = meta.submitError;
  var isError = showError({
    meta: meta
  });
  var helperText = rest.helperText,
    textFieldProps = rest.textFieldProps,
    required = rest.required,
    lessRest = _objectWithoutPropertiesLoose(rest, _excluded4$1);
  return React.createElement(DateTimePicker$1, _extends({
    onChange: onChange,
    value: value === '' ? null : value
  }, lessRest, {
    slotProps: {
      textField: _extends({}, textFieldProps, {
        helperText: isError ? error || submitError : helperText,
        inputProps: {
          onBlur: function onBlur(event) {
            restInput.onBlur(event);
          },
          onFocus: function onFocus(event) {
            restInput.onFocus(event);
          }
        },
        error: isError,
        fullWidth: true,
        name: name,
        onChange: onChange,
        value: value === '' ? null : value,
        required: required
      })
    }
  }));
}

var _excluded$1 = ["name", "fieldProps"],
  _excluded2$1 = ["name", "onChange", "value"],
  _excluded3$1 = ["input", "meta", "showError"],
  _excluded4 = ["helperText", "textFieldProps", "required"];
function TimePicker(props) {
  var name = props.name,
    fieldProps = props.fieldProps,
    rest = _objectWithoutPropertiesLoose(props, _excluded$1);
  return React.createElement(Field, _extends({
    name: name,
    render: function render(fieldRenderProps) {
      return React.createElement(TimePickerWrapper, _extends({}, fieldRenderProps, rest));
    }
  }, fieldProps));
}
function TimePickerWrapper(props) {
  var _props$input = props.input,
    name = _props$input.name,
    onChange = _props$input.onChange,
    value = _props$input.value,
    restInput = _objectWithoutPropertiesLoose(_props$input, _excluded2$1),
    meta = props.meta,
    _props$showError = props.showError,
    showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
    rest = _objectWithoutPropertiesLoose(props, _excluded3$1);
  var error = meta.error,
    submitError = meta.submitError;
  var isError = showError({
    meta: meta
  });
  var helperText = rest.helperText,
    textFieldProps = rest.textFieldProps,
    required = rest.required,
    lessRest = _objectWithoutPropertiesLoose(rest, _excluded4);
  return React.createElement(TimePicker$1, _extends({
    onChange: onChange,
    value: value === '' ? null : value
  }, lessRest, {
    slotProps: {
      textField: _extends({}, textFieldProps, {
        helperText: isError ? error || submitError : helperText,
        inputProps: {
          onBlur: function onBlur(event) {
            restInput.onBlur(event);
          },
          onFocus: function onFocus(event) {
            restInput.onFocus(event);
          }
        },
        error: isError,
        fullWidth: true,
        name: name,
        onChange: onChange,
        value: value === '' ? null : value,
        required: required
      })
    }
  }));
}

var _excluded = ["name", "type", "fieldProps"],
  _excluded2 = ["name", "value", "type", "onChange", "onBlur", "onFocus"],
  _excluded3 = ["input", "meta", "required", "fullWidth", "helperText", "showError"];
function TextField(props) {
  var name = props.name,
    type = props.type,
    fieldProps = props.fieldProps,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  return React.createElement(Field, _extends({
    name: name,
    type: type,
    render: function render(_ref) {
      var input = _ref.input,
        meta = _ref.meta;
      return React.createElement(TextFieldWrapper, _extends({
        input: input,
        meta: meta,
        name: name,
        type: type
      }, rest));
    }
  }, fieldProps));
}
function TextFieldWrapper(props) {
  var _props$input = props.input,
    name = _props$input.name,
    value = _props$input.value,
    type = _props$input.type,
    onChange = _props$input.onChange,
    onBlur = _props$input.onBlur,
    onFocus = _props$input.onFocus,
    restInput = _objectWithoutPropertiesLoose(_props$input, _excluded2),
    meta = props.meta,
    required = props.required,
    _props$fullWidth = props.fullWidth,
    fullWidth = _props$fullWidth === void 0 ? true : _props$fullWidth,
    helperText = props.helperText,
    _props$showError = props.showError,
    showError = _props$showError === void 0 ? showErrorOnChange : _props$showError,
    rest = _objectWithoutPropertiesLoose(props, _excluded3);
  var error = meta.error,
    submitError = meta.submitError;
  var isError = showError({
    meta: meta
  });
  return React.createElement(TextField$2, _extends({
    fullWidth: fullWidth,
    helperText: isError ? error || submitError : helperText,
    error: isError,
    onChange: onChange,
    onBlur: onBlur,
    onFocus: onFocus,
    name: name,
    value: value,
    type: type,
    required: required,
    inputProps: _extends({
      required: required
    }, restInput)
  }, rest));
}

// https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_get
function get(obj, path, defaultValue) {
  var result = String.prototype.split.call(path, /[,[\].]+?/).filter(Boolean).reduce(function (res, key) {
    return res !== null && res !== undefined ? res[key] : res;
  }, obj);
  return result === undefined || result === obj ? defaultValue : result;
}
// https://stackoverflow.com/questions/54733539/javascript-implementation-of-lodash-set-method
function set(obj, path, value) {
  if (Object(obj) !== obj) return obj; // When obj is not an object
  // If not yet an array, get the keys from the string-path
  if (!Array.isArray(path)) path = path.toString().match(/[^.[\]]+/g) || [];
  path.slice(0, -1).reduce(function (a, c, i) {
    return Object(a[c]) === a[c] // Does the key exist and is its value an object?
    ?
    // Yes: then follow that path
    a[c] :
    // No: create the key. Is the next key a potential array-index?
    a[c] = Math.abs(path[i + 1]) >> 0 === +path[i + 1] ? [] // Yes: assign a new array object
    : {};
  },
  // No: assign a new plain object
  obj)[path[path.length - 1]] = value; // Finally assign the value to the last key
  return obj; // Return the top-level object to allow chaining
}

function normalizeValidationError(err, translator) {
  return err.inner.reduce(function (errors, innerError) {
    var path = innerError.path,
      message = innerError.message;
    var el = translator ? translator(innerError) : message;
    // eslint-disable-next-line no-prototype-builtins
    if (path && errors.hasOwnProperty(path)) {
      var prev = get(errors, path);
      prev.push(el);
      set(errors, path, prev);
    } else {
      set(errors, path, [el]);
    }
    return errors;
  }, {});
}
/**
 * Wraps the execution of a Yup schema to return an Promise<ValidationError>
 * where the key is the form field and the value is the error string.
 */
function makeValidate(validator, translator) {
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(values) {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return validator.validate(values, {
              abortEarly: false
            });
          case 3:
            return _context.abrupt("return", {});
          case 6:
            _context.prev = 6;
            _context.t0 = _context["catch"](0);
            return _context.abrupt("return", normalizeValidationError(_context.t0, translator));
          case 9:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[0, 6]]);
    }));
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
}
/**
 * Wraps the sync execution of a Yup schema to return an ValidationError
 * where the key is the form field and the value is the error string.
 */
function makeValidateSync(validator, translator) {
  return function (values) {
    try {
      validator.validateSync(values, {
        abortEarly: false
      });
      return {};
    } catch (err) {
      return normalizeValidationError(err, translator);
    }
  };
}
/**
 * Uses the spec field in the schema to get whether or not
 * the field is marked as required or not.
 */
function makeRequired(schema) {
  var fields = schema.fields;
  return Object.keys(fields).reduce(function (accu, field) {
    if (fields[field].fields) {
      accu[field] = makeRequired(fields[field]);
    } else {
      accu[field] = !fields[field].spec.optional;
    }
    return accu;
  }, {});
}

function Debug() {
  return React.createElement(FormSpy, {
    subscription: {
      values: true
    }
  }, function (_ref) {
    var values = _ref.values;
    return React.createElement("pre", null, JSON.stringify(values, undefined, 2));
  });
}

export { Autocomplete, Checkboxes, DatePicker, DateTimePicker, Debug, ErrorMessage, Radios, Select, Switches, TextField, TimePicker, makeRequired, makeValidate, makeValidateSync, showErrorOnBlur, showErrorOnChange, useFieldForErrors };
//# sourceMappingURL=mui-rff.esm.js.map
